#!/usr/bin/env python
# encoding: UTF-8

import schizoidpy
from schizoidpy import StimGroup
from psychopy.visual import ImageStim, Rect, Circle
from random import random, expovariate, sample
from cgi import escape
from sys import argv

par = dict(zip(argv[1::2], argv[2::2])) # DEPLOYMENT SCRIPT EDITS THIS LINE

o = schizoidpy.Task(
    send_actiview_trigger_codes = par['eeg'],
    inpout32_addr = par['inpout32_addr'],
    button_radius = .12,
    okay_button_pos = (0, -.7))
o.save('task_version', par['task_version'])

# ------------------------------------------------------------
# Data
# ------------------------------------------------------------

male_names = {'Zach', 'Elijah', 'Travis', 'Michael', 'Ryan', 'Jake'}
extra_male_name = 'Austin'
female_names = {'Gabby', 'Katherine', 'Jen', 'Sarah', 'Rebecca', 'Emma'}
extra_female_name = 'Faith'
portrait_dims = (144, 216)
male_portraits = {'m-hispanic-smiling-blue-messyhair.jpg', 'm-hispanic-smiling-turquoise.jpg', 'm-white-neutral-gray.jpg', 'm-white-smiling-black.jpg', 'm-white-smiling-gray-braces.jpg', 'm-white-smiling-white-small_waving.jpg'}
female_portraits = {'f-hispanic-smiling-outdoors.jpg', 'f-white-neutral-gray-tanktop.jpg', 'f-white-neutral-workroom.jpg', 'f-white-smiling-black-braces.jpg', 'f-white-smiling-gray.jpg', 'f-white-smiling-office.jpg'}
locations = {
    ('Pasadena, CA', 'McKinley School'),
    ('Chicago, IL', 'Jonathan Burr Elementary'),
    ('Dayton, TN', 'Spring City Middle School'),
    ('Scranton, PA', 'Dunmore Middle School'),
    ('Pittsburgh, PA', 'Jefferson Middle School'),
    ('Ocean City, NJ', 'Ocean City Intermediate'),
    ('Saint Paul, MN', 'Twin Cities Academy'),
    ('Euclid, OH', 'Forest Park Middle School'),
    ('Westbrook, ME', 'Westbrook Middle School'),
    ('Allen, TX', 'Kerr Elementary School'),
    ('San Jose, CA', 'Holy Family School')}
interests = {
    'Pretty much anything, lol.',
    'Video Games, Soccer',
    'Reading and writing all kinds of things. But especially poetry.',
    'baking, skateboards, dogs',
    'singing and swimming (not at the same time)',
    'jazz band, movies',
    'baseball, juggling',
    'Horror movies & magic tricks',
    'um, Hawaii? I really like traveling. I went snorkeling once, too.',
    'drawing, video games, my cats',
    'drama'}
ages = map(str, [
    11, 11, 11, 11,
    12, 12, 12, 12, 12,
    13, 13])

round_descriptions = [
    dict(place = 'Kauai',
        background = 'Hanalei,_Kauai_HI.jpg',
        fluff = "Welcome to Kauai, the geologically oldest of the Hawaiian Islands! You are getting closer to the Big Island of Hawaii. Let's play another round to see who will continue on.",
        question = 'Who do you most admire?',
        responses = ["don't know", 'my mom', 'Grandpa', 'my English teacher', 'obama', 'maya angelou', 'abraham lincoln', 'mark zuckerberg', 'Einstein', 'Bill Waterson']),
    dict(place = 'Oahu',
        background = 'Sunset_next_to_Waikiki_Beach,_Oahu,_Hawai,_USA1.jpg',
        fluff = "Welcome to Oahu, the third-largest of the Hawaiian Islands! You are getting closer and closer to the Big Island. Let's play another round to see who will continue on.",
        question = "What's your least favorite thing to do (that you have to do anyway)?",
        responses = ['clean my room', 'The dishes', 'math homework', 'homework', 'babysit my little brother', 'Getting up in the morning!', 'school', 'church', 'errands']),
    dict(place = 'Molokai',
        background = 'Church_at_the_end_of_the_road.jpg',
        fluff = "Welcome to Molokai, an island built from two shield volcanoes and one step closer to the Big Island. Let's play again!",
        question = 'If you could bring only one thing to a desert island, what would it be?',
        responses = ['signal flares', 'wii', 'xbox', 'computer', 'my iphone', 'lots of books', 'a soccer ball', 'my best friend']),
    dict(place = 'Lanai',
        background = 'Full_moon_setting_over_Lanai.jpg',
        fluff = "Welcome to Lanai, a comma-shaped island that was once covered with pineapple plantations. You're the nearest you've come to the Big Island yet, but which of you will make it there? Let's play another round.",
        question = "What's your favorite subject in school?",
        responses = ['none of them', 'lunch', 'PE', 'math', 'science', 'Latin', 'social studies']),
    dict(place = 'Maui',
        background = 'Kipahulu_coast.jpg',
        fluff = "Welcome to Maui, the second-largest of the Hawaiian Islands! You're almost there! Let's play again to see who will continue on to the Big Island of Hawaii.",
        question = "What's your favorite word?",
        responses = ['yes', 'quest', 'victory', 'crustacean', 'pizza', 'frost'])]

round_wait = 2

# The format of EEG trigger codes is as follows:
#
# Bits 0–2: Encodes the type of event.
events = dict(
    # We skip 0 because that's a control code.
    subject_votes_to_accept              = 0b00000001,
    subject_votes_to_reject              = 0b00000010,
    coplayer_picture_before_showing_vote = 0b00000011,
    subject_gets_accept_vote             = 0b00000100,
    subject_gets_reject_vote             = 0b00000101)
# Bits 3–6: Encodes the coplayer involved in the event.
# Bit 7: Always 0, avoiding confusion with codes 255 and 256
#   (which are more control codes).

reject_onset_code = 1
accept_onset_code = 2

# ------------------------------------------------------------
# Helper functions
# ------------------------------------------------------------

def shuffled(x): return sample(x, len(x))
def choice(x): return shuffled(x)[0]
  # random.choice doesn't work on sets.

def image_path(image):
    return par['image_dir'] + image

big_canvas = Rect(o.win,
    width = 1.5, height = 1.8,
    fillColor = 'white', opacity = .8)
strip_canvas = Rect(o.win,
    width = 1.2, height = .3,
    fillColor = 'white', opacity = .8)
background_imagestim = ImageStim(o.win,
    image_path('Niihau_sep_2007.jpg'),
    units = 'pix',
    size = [o.screen_width, o.screen_height])

def background(image_name):
    background_imagestim.setImage(image_path(image_name))
    return o.showing(background_imagestim, big_canvas)

def message(duration, string):
    # Temporarily replace big_canvas with strip_canvas.
    with o.hiding(big_canvas):
        o.wait_screen(duration,
            strip_canvas,
            o.text(0, 0, string, wrap = 1.2))

blank_background = o.hiding(background_imagestim, big_canvas)

def lag(duration):
    message(duration, u'Waiting for all players to finish…')

# ------------------------------------------------------------
# Coplayers
# ------------------------------------------------------------

alternate_afirst = (1, 0, 1, 0, 1, 0)
alternate_rfirst = (0, 1, 0, 1, 0, 1)

coplayers = dict(
# - Expendable coplayers will eventually be kicked off;
#   non-expendable coplayers won't.
# - A true vote is a vote to keep the subject and
#   a false vote is a vote to reject.

   a1 = dict(expendable = False,
       votes = (0, 0, 0, 1, 0, 0)),
   a2 = dict(expendable = False,
       votes = (1, 0, 1, 0, 0, 0)),
   a3 = dict(expendable = False,
       votes = (0, 1, 1, 0, 0, 1)),
   a4 = dict(expendable = False,
       votes = (1, 0, 0, 1, 1, 1)),
   a5 = dict(expendable = False,
       votes = (1, 1, 0, 1, 1, 1)),
     # Each column has 2 of one choice and 3 of the other, and
     # there are 15 of each across the whole matrix. Each coplayer
     # aN votes to accept the player N times over the course of
     # the game.

   xpendable_afirst_1 = dict(expendable = True, votes = alternate_afirst),
   xpendable_afirst_2 = dict(expendable = True, votes = alternate_afirst),
   xpendable_afirst_3 = dict(expendable = True, votes = alternate_afirst),
   xpendable_rfirst_1 = dict(expendable = True, votes = alternate_rfirst),
   xpendable_rfirst_2 = dict(expendable = True, votes = alternate_rfirst),
   xpendable_rfirst_3 = dict(expendable = True, votes = alternate_rfirst))

for i, (k, p) in enumerate(sorted(coplayers.items())):
    p['id'] = k
    p['trigger_code'] = i << 3
    p['votes'] = map(bool, p['votes'])
    p['poll_responses'] = len(p['votes']) * [None]
coplayers = coplayers.values()

# Make the coplayers evenly split by gender within the expendable
# and non-expendable groups.
for i, p in enumerate(shuffled([p for p in coplayers if p['expendable']])):
    p['female'] = bool(i % 2)
for i, p in enumerate(shuffled([p for p in coplayers if not p['expendable']])):
    p['female'] = bool(i % 2)
  # Because there's an odd number of non-expendable coplayers,
  # we're left with one more male than we have females. Later,
  # if we learn that the subject is male, we'll make one of
  # the male non-expendables female.

def pronoun_nom(p): return 'she' if p['female'] else 'he'
def pronoun_obj(p): return 'her' if p['female'] else 'him'
def pronoun_gen(p): return 'her' if p['female'] else 'his'

# Assign names and portraits.
males = zip(shuffled(male_names), shuffled(male_portraits))
females = zip(shuffled(female_names), shuffled(female_portraits))
for p in coplayers:
    p['name'], p['portrait'] = females.pop() if p['female'] else males.pop()

portrait_stim_cache = {}
def portrait_stim(x, y, p):
    img = par['subject_portrait_path'] if p is None else image_path(p['portrait'])
    k = x, y, img
    if k not in portrait_stim_cache:
        portrait_stim_cache[k] = StimGroup((
            ImageStim(o.win, pos = (x, y),
                image = img),
            Rect(o.win, pos = (x, y),
                width = (portrait_dims[0] + 3) / (.5 * o.screen_width),
                height = (portrait_dims[1] + 3) / (.5 * o.screen_height),
                lineColor = "black", lineWidth = 3)))
    return portrait_stim_cache[k]

# Assign fluff.
for p, age, (hometown, school), interest in zip(
        coplayers, shuffled(ages), shuffled(locations), shuffled(interests)):
    p['fluff'] = dict(
        Age = age, Hometown = hometown, School = school, Interests = interest)

# Dump coplayer descriptions.
if par['debug']:
    for p in sorted(coplayers, key = lambda p: p['id']):
        print "--{}--\n{}".format(p['id'], p)

o.save('coplayers', coplayers[:])
  # We copy the coplayers list because we'll be removing elements
  # as expendable coplayers are kicked out. But this is
  # deliberately not a deep copy.

# ------------------------------------------------------------
# The voting subroutine
# ------------------------------------------------------------

icon_dim = 200 # Pixels
icon_thickness = 10 # Pixels

def icon_frame(x, color):
    kw = dict(units = 'pix', fillColor = color, lineColor = color)
    return [
        Rect(o.win, icon_dim, icon_thickness,
            pos = (x, icon_dim/2 - icon_thickness/2), **kw),
        Rect(o.win, icon_dim, icon_thickness,
            pos = (x, -icon_dim/2 + icon_thickness/2), **kw),
        Rect(o.win, icon_thickness, icon_dim,
            pos = (x + icon_dim/2, 0), **kw),
        Rect(o.win, icon_thickness, icon_dim,
            pos = (x - icon_dim/2, 0), **kw)]

def reject_icon(x = 0):
    x = x * (o.screen_width/2)
    return StimGroup(icon_frame(x, 'red') + [
        Rect(o.win, icon_dim, icon_thickness,
            pos = (x, 0), ori = 45,
            units = 'pix', fillColor = 'red', lineColor = 'red'),
        Rect(o.win, icon_dim, icon_thickness,
            pos = (x, 0), ori = -45,
            units = 'pix', fillColor = 'red', lineColor = 'red')])

reject_icon_c = reject_icon()

def accept_icon(x = 0):
    x = x * (o.screen_width/2)
    return StimGroup(icon_frame(x, 'green') + [
        Rect(o.win, .75*icon_dim, icon_thickness, ori = -68,
            pos = (x + 20, 0),
            units = 'pix', fillColor = 'green', lineColor = 'green'),
        Rect(o.win, .25*icon_dim, icon_thickness, ori = 45,
            pos = (x - 2.2*icon_thickness, -.25*icon_dim),
            units = 'pix', fillColor = 'green', lineColor = 'green')])

accept_icon_c = accept_icon()

def voting(nround):

    # The subject votes.
    cps = shuffled(coplayers)
    o.save('subject_votes_order', [p['id'] for p in cps])
    for p in cps:
        o.button_screen(('subject_votes', p['id']),
            portrait_stim(-.5, .5, p),
            o.html(.2, .8, vAlign = 'top', font_size = 14, string =
                # Show everything the subject knows about this
                # coplayer, except for observed voting behavior.
                p['name'] + "<br><br>" +
                '<b>{}</b><br>'.format('Female' if p['female'] else 'Male') +
                '<br>'.join(
                    ['<b>{}:</b> {}'.format(k, escape(p['fluff'][k])) for k in
                        ['Age', 'Hometown', 'School', 'Interests']] +
                    ['<b>{}:</b> {}'.format(
                            escape(r['question']),
                            escape(p['poll_responses'][i + 1]))
                        for i, r in enumerate(round_descriptions)
                        if i + 1 <= nround])),
            o.text(0, -.5, wrap = 2, string =
                'Should we keep {} or kick {} out?'.format(
                    p['name'], pronoun_obj(p))),
            o.button(-.25, -.7, 'Kick\nOut',
                p['trigger_code'] | events['subject_votes_to_reject']),
            o.button(.25, -.7, 'Keep',
                p['trigger_code'] | events['subject_votes_to_accept']))

    # Use a variable delay for verisimilitude.
    varwait = .5 + max(expovariate(1) for _ in coplayers)
    o.save('voting_varwait', varwait)
    lag(varwait)

    # Coplayers' votes are shown.
    with blank_background:
        cps = shuffled(coplayers)
        o.save('coplayer_votes_shown_order', [p['id'] for p in cps])
        if nround == 0:
            o.okay_screen('feedback_explanation',
                o.text(0, .7, "You'll now get to see how each other player voted for you. You'll see each player's name and photo followed by an icon."),
                accept_icon(-.5),
                o.text(-.5, -.3, "This means a vote to keep you.",
                    vAlign = 'top', wrap = .6),
                reject_icon(.5),
                o.text(.5, -.3, "This means a vote to kick you out.",
                    vAlign = 'top', wrap = .6))
        for i, p in enumerate(cps):
            varwait = 2 + random()
            o.save(('feedback_varwait', i), varwait)
            o.wait_screen(varwait, o.fixation_cross)
            o.trigger(p['trigger_code'] |
                events['coplayer_picture_before_showing_vote'])
            o.wait_screen(2,
                o.text(0, -.5, p['name']),
                portrait_stim(0, 0, p))
            o.wait_screen(1, o.fixation_cross)
            keep = p['votes'][nround]
            o.trigger(p['trigger_code'] | events[
                'subject_gets_accept_vote' if keep else 'subject_gets_reject_vote'])
            o.wait_screen(1.5,
                accept_icon_c if keep else reject_icon_c)

    # An expendable coplayer is outsted.
    votes_against_loser = len(coplayers)/2 + 2
    votes_against_subject = sum(not p['votes'][nround] for p in coplayers)
    if votes_against_loser <= votes_against_subject:
        votes_against_loser = votes_against_subject + 1
    o.save('votes_against_loser', votes_against_loser)
    loser = choice([p for p in coplayers if p['expendable']])
    o.save('loser', loser['id'])
    coplayers.remove(loser)
    o.okay_screen('loser',
        portrait_stim(0, .5, loser),
        o.text(0, -.2, "And it's final decision time. Looks like {} got {} votes to go home! {} journey ends here. The remaining players will continue on to the next island.".format(
            loser['name'],
            votes_against_loser,
            pronoun_gen(loser).capitalize())))

# ------------------------------------------------------------
# Preliminaries
# ------------------------------------------------------------

if par['debug']:
    o.data['subject'] = 'test'
else:
    o.get_subject_id('Island Getaway')

subject_name = '???'

o.start_clock()

# ------------------------------------------------------------
# Introduction
# ------------------------------------------------------------

with background('Hawaje-NoRedLine.jpg'):
    message(2, 'Aloha!')

    with o.dkey_prefix('introduction'):

        o.instructions('set_the_scene', "You've just landed on the Hawaiian Island of Nihau to begin a summer vacation with a group of {} other kids. But the journey isn't over yet! First, you must make your way along the islands to get to the Big Island of Hawaii. Once there, you will be able to begin your vacation: relaxing on the beach, swimming in the sparkling water, biking around volcanoes, visiting parks, shopping, and whatever else you'd like to do.".format(
            len(coplayers)))

        o.instructions('game_overview', "As you travel along the islands, you'll get to know more and more about the other players you're traveling with. After each round, you'll have the chance to vote for who you would like to continue on to the Big Island with you and who you would like to send home. But the other players will also be voting on you! And your goal is to hang out with them as long as possible to be one of the {} players (out of the original {}) who make it to the Big Island!".format(
            len(coplayers) + 1 - (len(round_descriptions) + 1),
            len(coplayers) + 1))

    with o.dkey_prefix('profile'):

        o.button_screen('gender',
           o.text(0, .8, 'Now you can fill out your profile.\n\nAre you male or female?', vAlign = 'top'),
           o.button(-.25, -.7, 'Male'),
           o.button(.25, -.7, 'Female'))
        if o.data['profile']['gender'] == 'Male':
            # Make a male non-expendable female so that there's
            # of equal number of male and female players.
            transgal = choice([p for p in coplayers if not p['female']])
            transgal['female'] = True
            transgal['name'], = female_names - {p['name'] for p in coplayers if p['female']}
            transgal['portrait'], = female_portraits - {p['portrait'] for p in coplayers if p['female']}

        o.text_entry_screen('name', 'What is your first name?')
        subject_name = o.data['profile']['name']
        # Try to normalize capitalization.
        if subject_name.isalpha() and (
                subject_name.islower() or
                    (len(subject_name) > 2 and subject_name.isupper())):
                      # Don't downcase "AJ".
            subject_name = subject_name.lower().capitalize()
        # If the subject's name exactly matches the name of a
        # coplayer (case-insensitively), rename the coplayer.
        try:
            p = next(p for p in coplayers if
                p['name'].lower() == subject_name.lower())
            p['name'] = extra_female_name if p['female'] else extra_male_name
        except StopIteration:
            pass

        o.nonneg_int_entry_screen('age', 'How old are you?')

        o.text_entry_screen('hometown', 'What is your hometown?')

        o.text_entry_screen('school', 'What school do you go to?')

        o.text_entry_screen('interests', "What are some things you're interested in?")

        o.okay_screen('view',
            portrait_stim(0, .5, None),
            o.html(0, 0,
                subject_name + "<br><br>" +
                '<b>{}</b><br>'.format(o.data['profile']['gender']) +
                '<br>'.join(
                    '<b>{}:</b> {}'.format(k.capitalize(), escape(o.data['profile'][k])) for k in
                        ['age', 'hometown', 'school', 'interests'])))

    lag(3)

# ------------------------------------------------------------
# Round 0
# ------------------------------------------------------------

with o.dkey_prefix(('round', 0)), background('Niihau_sep_2007.jpg'):

    message(round_wait, 'Round 1: Nihau')

    o.instructions('read_profiles', 'Take a moment to learn about the other players.')

    cps = shuffled(coplayers)
    o.save('profile_order', [p['id'] for p in cps])
    for i, p in enumerate(cps):
        o.okay_screen(('fluff', i),
            portrait_stim(0, .5, p),
            o.html(0, 0,
                p['name'] + "<br><br>" +
                '<b>{}</b><br>'.format('Female' if p['female'] else 'Male') +
                '<br>'.join(
                    '<b>{}:</b> {}'.format(k, escape(p['fluff'][k])) for k in
                        ['Age', 'Hometown', 'School', 'Interests'])))

    o.instructions('voting_begins', html = True, string = "And on to the first round of voting. Who do you want to send home? And who do you want to continue with on to the next island? You can vote to keep or send home as many kids as you want, but you have to vote to send <b>at least one</b> other player home. Whoever gets the most votes to be sent home will be kicked off the island, with ties broken randomly.<br><br>Watch out: votes aren't private. Each player gets to see how every other player voted for them.")

    voting(0)

# ------------------------------------------------------------
# All other rounds
# ------------------------------------------------------------

for i, r in enumerate(round_descriptions):
    nround = i + 1
    with o.dkey_prefix(('round', nround)), background(r['background']):

        message(round_wait, 'Round {}: {}'.format(nround + 1, r['place']))
        o.instructions('fluff', r['fluff'])

        o.text_entry_screen('poll_question',
            "Now you'll all answer another question so you can get to know each other better.\n\n" +
            r['question'])

        for p, resp in zip(coplayers, shuffled(r['responses'])):
            p['poll_responses'][nround] = resp
        varwait = max(expovariate(2) for _ in coplayers)
        o.save('poll_varwait', varwait)
        lag(varwait)

        responses = shuffled(
            [(p['id'], p['name'], p['poll_responses'][nround]) for p in coplayers] +
            [('SUBJECT', subject_name, o.data['round'][nround]['poll_question'])])
        o.save('poll_response_order', [r[0] for r in responses])
        o.okay_screen('poll_results',
            o.text(0, .8, "Here are your responses:"),
            o.text(0, .65,
                "\n".join(["{}: {}".format(r[1], r[2]) for r in responses]),
                wrap = 1.4, vAlign = 'top'))

        voting(nround)

# ------------------------------------------------------------
# A winner is you!
# ------------------------------------------------------------

with background('Rainbow_over_palms_at_Big_Island_of_Hawaii.jpg'):
    message(3, 'You made it to the Big Island of Hawaii!\nLet the vacation begin!')

# ------------------------------------------------------------
# Post-game questionnaire
# ------------------------------------------------------------

o.questionnaire_screen('postgame_questionnaire', 'In the below questionnaire, pick the options that best represent the feelings you were experiencing during the game.',
    scale_levels = ('Not at all', '', '', '', 'Extremely'),
    questions = [
        {'id': ('task disengagement', 4), 'text': 'I thought "This game is dumb."'},
        {'id': ('belonging', 1), 'text': "I felt I didn't fit in with the others."},
        {'id': ('mood', 6), 'text': 'I felt pleasant.'},
        {'id': ('belonging', 3), 'text': 'I felt like an outsider.'},
        {'id': ('self-esteem', 2), 'text': 'My self-esteem was high.'},
        {'id': ('self-esteem', 3), 'text': 'I felt liked.'},
        {'id': ('self-esteem', 4), 'text': 'I felt unsure of myself.'},
        {'id': ('preoccupation with exclusion', 3), 'text': "I have often been kept out of games by other kids."},
        {'id': ('belonging', 5), 'text': 'I felt the other players wanted me to continue on to the Big Island.'},
        {'id': ('preoccupation with exclusion', 2), 'text': 'I thought "I won\'t be voted off this round."'},
        {'id': ('preoccupation with exclusion', 1), 'text': 'I wondered "Why did they vote me off?"'},
        {'id': ('self-esteem', 5), 'text': 'I felt happy with how things were.'},
        {'id': ('task disengagement', 2), 'text': 'After a while I lost interest in staying in the game.'},
        {'id': ('survivor', 1), 'text': 'It bothered me to vote off other players.'},
        {'id': ('interpersonal attributions', 3), 'text': 'I felt the other players were selfish.'},
        {'id': ('belonging', 2), 'text': 'I felt rejected.'},
        {'id': ('belonging', 6), 'text': 'I felt others were unfriendly.'},
        {'id': ('mood', 1), 'text': 'I felt good.'},
        {'id': ('belonging', 4), 'text': 'I felt I belonged to the group.'},
        {'id': ('mood', 8), 'text': 'I felt sad.'},
        {'id': ('interpersonal attributions', 2), 'text': 'I felt the other players were mean.'},
        {'id': ('mood', 7), 'text': 'I felt happy.'},
        {'id': ('control', 5), 'text': 'I felt the other players decided everything.'},
        {'id': ('mood', 2), 'text': 'I felt bad.'},
        {'id': ('survivor', 2), 'text': 'I wondered why other players voted me off.'},
        {'id': ('mood', 3), 'text': 'I felt friendly.'},
        {'id': ('meaningful existence', 1), 'text': 'I felt invisible.'},
        {'id': ('preoccupation with exclusion', 4), 'text': "Once kids keep me out of a game, they never let me in."},
        {'id': ('meaningful existence', 4), 'text': 'I felt important.'},
        {'id': ('meaningful existence', 5), 'text': 'I felt useful.'},
        {'id': ('control', 4), 'text': 'I felt I was unable to influence the action of others.'},
        {'id': ('task disengagement', 1), 'text': "I kept hoping I wouldn't be kicked off."},
        {'id': ('task disengagement', 3), 'text': "I would've liked to play this game again."},
        {'id': ('interpersonal attributions', 1), 'text': "I felt the other players didn't care about my feelings."},
        {'id': ('mood', 4), 'text': 'I felt unfriendly.'},
        {'id': ('control', 2), 'text': 'I felt I had control over the course of the game.'},
        {'id': ('interpersonal attributions', 4), 'text': 'I felt the other players were unfair.'},
        {'id': ('self-esteem', 1), 'text': 'I felt good about myself.'},
        {'id': ('meaningful existence', 2), 'text': "I felt I didn't matter."},
        {'id': ('control', 1), 'text': 'I felt powerful.'},
        {'id': ('control', 3), 'text': 'I felt I had the ability to significantly alter events.'},
        {'id': ('meaningful existence', 3), 'text': "I felt as if I didn't exist."},
        {'id': ('mood', 5), 'text': 'I felt angry.'}])

# ------------------------------------------------------------
# Done!
# ------------------------------------------------------------

o.done(par['output_path_fmt'].format(**o.data))

o.wait_screen(1,
    o.text(0, 0, 'Done!\n\nPlease let the experimenter know you are done.'))
